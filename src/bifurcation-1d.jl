"""
Hold the experiment data for a 1D bifurcation analysis.

### Properties

  - `base_params::Params`: The base parameters used for the simulation.
  - `u0::Vector`: Initial conditions for the simulation.
  - `change::Pair`: A pair of (parameter name, parameter values)
    indicating the parameter to be varied
    when drawing the bifurcation diagram.
    Parameter values should be a vector or
    an iterable collection of values.
  - `tspan::T`: Time span of all the simulations.
  - `params::Vector{Params}`: A vector of parameters for each simulation.
    This parameter vector is generated by varying
    the parameter specified in `change`.
  - `solutions::Vector{ODESolution}`: A vector of ODE solutions
    corresponding to each parameter set.
  - `change_options`: Options for changing parameters.
  - `solver_options`: Options for the ODE solver.
"""
@kwdef struct Bifurcation1d{Params <: AbstractEbmParams, T}
    base_params::Params
    u0::Vector
    change::Pair
    tspan::T
    params::Vector{Params}
    solutions::Vector{ODESolution}
    change_options = NamedTuple()
    solver_options = get_solver_options(T)
end

"""
$(SIGNATURES)

Run a bifurcation analysis for a 1D system.
Returns a `Bifurcation1d` object containing the results.

See also: `plot_bifurcation_1d`, `Bifurcation1d`.
"""
function run_bifurcation_1d(
    base_params::T,
    u0::AbstractVector,
    change::Pair;
    tspan = (0.0f0, 500.0f0),
    change_options = NamedTuple(),
    solver = get_default_solver(T),
    solver_options = get_default_solver_options(T),
) where {T}
    # Data
    param_name, param_values = change
    params = map(param_values) do value
        update_params(base_params, param_name => value; change_options...)
    end
    solutions::Vector{ODESolution} = map(params) do params_
        _simulate(params_, u0, tspan; solver, solver_options)
    end

    return Bifurcation1d(;
        base_params,
        params,
        change,
        u0,
        tspan,
        solutions,
        change_options,
        solver_options,
    )
end
